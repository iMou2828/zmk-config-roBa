#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W       &kp E     &kp R                   &kp T                                                         &kp Y                 &kp U  &lt 5 I    &kp O    &kp P
&kp A      &kp S       &kp D     &kp F                   &kp G        &kp F10                     &kp LA(LEFT_ARROW)   &kp H                 &kp J  &kp K      &kp L    &lt 1 MINUS
&kp Z      &kp X       &kp C     &kp V                   &kp B        &kp F7                      &kp LA(RIGHT_ARROW)  &kp N                 &kp M  &kp COMMA  &kp DOT  &lt 1 SLASH
&kp LCTRL  &kp LSHIFT  &kp LWIN  &lt_to_layer_0 2 LANG2  &lt 1 SPACE  &lt_to_layer_0 3 LANG1      &kp BACKSPACE        &mt LEFT_SHIFT ENTER                             &kp ESC
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1            &kp F2      &kp F3     &kp F4     &kp F5                                   &kp F6         &kp F7          &kp F8          &kp F9           &kp F10
&kp TAB           &none       &none      &kp LC(A)  &kp LC(S)  &kp LG(LS(S))      &kp LC(Z)  &kp PAGE_UP    &mkp MB1        &kp UP_ARROW    &mkp MB2         &none
&kp LALT          &none       &kp LC(X)  &kp LC(C)  &kp LC(V)  &none              &kp LC(Y)  &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp HOME
&kp LEFT_CONTROL  &kp LSHIFT  &kp LWIN   &trans     &trans     &trans             &kp DEL    &kp LS(ENTER)                                                   &kp END
            >;
        };

        NUM {
            bindings = <
&none             &kp LS(N7)        &kp LS(N8)        &kp LS(N9)        &none                              &kp N7        &kp N8        &kp N9        &kp EQUAL      &kp LS(EQUAL)
&kp TAB           &kp LS(NUMBER_4)  &kp LS(N5)        &kp LS(NUMBER_6)  &none   &none       &kp PERIOD     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp LS(EQUAL)  &kp MINUS
&kp LEFT_ALT      &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &none   &none       &kp N0         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LS(N8)     &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_SHIFT    &kp LWIN          &trans            &trans  &trans      &kp BACKSPACE  &kp ENTER                                                &kp ESCAPE
            >;
        };

        ARROW {
            bindings = <
&none             &none           &none               &none               &trans                                                      &kp LS(N9)        &kp LS(N0)         &kp TILDE          &kp EQUAL      &kp LS(EQUAL)
&kp TAB           &none           &none               &kp LG(UP_ARROW)    &none                &kp LC(TAB)          &kp LS(NUMBER_1)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SQT            &kp LS(EQUAL)  &kp MINUS
&kp LEFT_ALT      &none           &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)  &kp LC(LS(TAB))      &kp LS(NUMBER_2)  &kp LS(SQT)       &kp LS(SQT)        &kp LS(SEMICOLON)  &kp SEMICOLON  &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LWIN            &trans              &trans               &trans               &kp BACKSPACE     &kp LA(ENTER)                                                          &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&none  &none  &none  &none  &none                    &none  &none     &none  &none     &none
&none  &none  &none  &none  &none  &none      &none  &none  &mkp MB1  &none  &mkp MB2  &none
&none  &none  &none  &none  &none  &none      &none  &none  &none     &none  &none     &none
&none  &none  &none  &none  &none  &none      &none  &none                             &none
            >;
        };

        SCROLL {
            bindings = <
&none  &none  &none  &none   &none                       &none   &none             &none  &none  &none
&none  &none  &none  &none   &none   &none       &none   &none   &kp LEFT_CONTROL  &none  &none  &none
&none  &none  &none  &none   &none   &none       &none   &none   &none             &none  &none  &none
&none  &none  &none  &trans  &trans  &trans      &trans  &trans                                  &none
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
